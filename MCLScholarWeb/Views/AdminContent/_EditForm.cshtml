@model MCLScholarWeb.Models.Entity.Form

@{
    ViewBag.Title = "Edit Form";

}

<style>
    #h-downloadable-forms{
        text-decoration:underline;
    }
    .control-label{
        color:black;
    }
</style>

<div class="container">

    @try
    {
        if (ViewBag.errorMessage != null)
        {

            <div class="row">

                <div class="col-md-12 shadow p-3 bg-white rounded">
                    <p class="text-danger p-3">@ViewBag.errorMessage</p>

                </div>

            </div>

        }

    }
    catch (Exception e) { }
        
        @using (Html.BeginForm("EditForm", "AdminContent", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            @Html.HiddenFor(model => model.DateAdded)
            @Html.HiddenFor(model => model.UserID)

            <div class="row p-2 mt-4 mb-3">
                <div class="col-4">
                    <h1 class="display-4">Edit Forms</h1>
                </div>
                <div class="col-8">
                    <input type="submit" value="Save" class="btn btn-primary float-right ml-3 mb-3" onclick="return confirm('Confirm Action');" />
                    <a href="@Url.Action("DeleteForm", "AdminContent", new { formID = Model.FormID})" onclick="return confirm('Are you sure you want to delete this post?');" class="btn btn-outline-danger text-danger float-right">Delete Form</a>
                </div>
            </div>


            <div class="card rounded border p-3">

                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.FormID)

                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-12">
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control", required = "required", rows="7" })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <p class="control-label col-md-10">Upload Form</p>
                        <div class="col-md-8">

                            @{
                                var disabled = "disabled";
                                if (Model.FormsResources.Count() != 0)
                                {
                                    disabled = "disabled";
                                }
                                else
                                {
                                    disabled = "";
                                }
                            }

                            <input type="file" name="formFile" id="fileInput" class="custom-form form-control justify-content-center" accept="application/pdf" style="background-color:white; border: 0;" required @disabled />
                        </div>
                    </div>

                    @*<div class="form-group">
                        <center>
                            <div class="col-md-8">
                                <input type="submit" value="Save" class="btn btn-outline-success btn-block" onclick="return confirm('Confirm action');" />
                                <a href="@Url.Action("DeleteForm", "AdminContent", new { formID = Model.FormID})" onclick="return confirm('Are you sure you want to delete this post?');" class="btn btn-outline-danger btn-block">Delete Form</a>
                            </div>
                        </center>
                    </div>*@

                </div>
            </div>
            
        }

        <div class="card rounded border p-3 mt-3">

        @{
            if (Model.FormsResources != null)
            {
                <p class="control-label col-md-6">Current Form</p>
                var resources = Model.FormsResources;

                foreach (var resource in resources)
                {
                    var locStorage = resource.FileLocationStorage;

                    <div class="row">
                        <div class="col-md-3"></div>
                        <div class="col-md-6">
                            <a href="@locStorage.FileLocation" class="btn btn-outline-info btn-block mb-2 text-info" target="_blank">@locStorage.FileName</a>
                            <a href="@Url.Action("RemoveFormBlob", "AdminContent", new { fileName = locStorage.FileName, fileID = locStorage.FileID })" class="btn btn-warning btn-block" onclick="return confirm('Are you sure you want to delete this form?');">Delete</a>
                        </div>
                        <div class="col-md-3"></div>
                    </div>
                }
            }
        }

        </div>

</div>
